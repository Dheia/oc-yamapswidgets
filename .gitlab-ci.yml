stages:
  - test
  - deploy

code_quality:
    image: git.rubium.ru:4567/rubium/ubuntu-php-base-7.3
    stage: test
    cache: {}
    before_script:
        - composer require "squizlabs/php_codesniffer=*"
        - composer require micheh/phpcs-gitlab
    script:
        - ./vendor/bin/phpcs --config-set ignore_errors_on_exit 1
        - ./vendor/bin/phpcs --config-set ignore_warnings_on_exit 1
        - ./vendor/bin/phpcs -i
        - ./vendor/bin/phpcs --config-show
        - ./vendor/bin/phpcs --standard=phpcs.xml --colors --report=emacs --report-\\Micheh\\PhpCodeSniffer\\Report\\Gitlab=gl-code-quality-report.json
    artifacts:
        reports:
            codequality: gl-code-quality-report.json
        expire_in: 1 week
    retry: 2
    allow_failure: false
    only:
        - branches
        - tags
    except:
        refs:
            - schedules
            - triggers
        variables:
            - $CI_COMMIT_MESSAGE =~ /skip tests/
    tags:
        - docker
phpmd:
    image: jakzal/phpqa
    stage: test
    cache: {}
    before_script:
    script:
        - phpmd . text PHPMD_custom.xml
        - phpmd . json PHPMD_custom.xml
    artifacts:
        reports:
            codequality: gl-code-quality-report.json
        expire_in: 1 week
    retry: 2
    allow_failure: false
    only:
        - branches
        - tags
    except:
        refs:
            - schedules
            - triggers
        variables:
            - $CI_COMMIT_MESSAGE =~ /skip tests/
    tags:
        - docker
deploy:
  stage: deploy
  script:
    - env
#    - 'curl --header "Job-Token: $CI_JOB_TOKEN" --data tag=<tag> "https://gitlab.example.com/api/v4/projects/$CI_PROJECT_ID/packages/composer"'

# This file is a template, and might need editing before it works on your project.
# Publishes a tag/branch to Composer Packages of the current project
publish:
  image: curlimages/curl:latest
  stage: deploy
  variables:
    URL: "$CI_SERVER_PROTOCOL://$CI_SERVER_HOST:$CI_SERVER_PORT/api/v4/projects/$CI_PROJECT_ID/packages/composer?job_token=$CI_JOB_TOKEN"
  script:
    - version=$([[ -z "$CI_COMMIT_TAG" ]] && echo "branch=$CI_COMMIT_REF_NAME" || echo "tag=$CI_COMMIT_TAG")
    - insecure=$([ "$CI_SERVER_PROTOCOL" = "http" ] && echo "--insecure" || echo "")
    - response=$(curl -s -w "\n%{http_code}" $insecure --data $version $URL)
    - code=$(echo "$response" | tail -n 1)
    - body=$(echo "$response" | head -n 1)
    # Output state information
    - if [ $code -eq 201 ]; then
        echo "Package created - Code $code - $body";
      else
        echo "Could not create package - Code $code - $body";
        exit 1;
      fi
